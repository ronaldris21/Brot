// <auto-generated />
using System;
using Brot.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Brot.DataContext.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220920211829_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Brot.Models.Categoria", b =>
                {
                    b.Property<int>("id_categoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_categoria"), 1L, 1);

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id_categoria");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("Brot.Models.Comentario", b =>
                {
                    b.Property<int>("id_comentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_comentario"), 1L, 1);

                    b.Property<int?>("Publicacionid_post")
                        .HasColumnType("int");

                    b.Property<int?>("Usuarioid_user")
                        .HasColumnType("int");

                    b.Property<string>("contenido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("fecha_creacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_post")
                        .HasColumnType("int");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("bit");

                    b.HasKey("id_comentario");

                    b.HasIndex("Publicacionid_post");

                    b.HasIndex("Usuarioid_user");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("Brot.Models.Interaccion_post", b =>
                {
                    b.Property<int>("id_interaccion_post")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_interaccion_post"), 1L, 1);

                    b.Property<int?>("Publicacionid_post")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioInteraccionid_user")
                        .HasColumnType("int");

                    b.Property<DateTime?>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_post")
                        .HasColumnType("int");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.HasKey("id_interaccion_post");

                    b.HasIndex("Publicacionid_post");

                    b.HasIndex("UsuarioInteraccionid_user");

                    b.ToTable("Interaccion_post");
                });

            modelBuilder.Entity("Brot.Models.Like_comentario", b =>
                {
                    b.Property<int>("id_like_comentario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_like_comentario"), 1L, 1);

                    b.Property<int?>("Comentarioid_comentario")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Usuarioid_user")
                        .HasColumnType("int");

                    b.Property<int>("id_comentario")
                        .HasColumnType("int");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.HasKey("id_like_comentario");

                    b.HasIndex("Comentarioid_comentario");

                    b.HasIndex("Usuarioid_user");

                    b.ToTable("Like_comentario");
                });

            modelBuilder.Entity("Brot.Models.Like_post", b =>
                {
                    b.Property<int>("id_like_post")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_like_post"), 1L, 1);

                    b.Property<int?>("Publicacionid_post")
                        .HasColumnType("int");

                    b.Property<int?>("Usuarioid_user")
                        .HasColumnType("int");

                    b.Property<DateTime?>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_post")
                        .HasColumnType("int");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.HasKey("id_like_post");

                    b.HasIndex("Publicacionid_post");

                    b.HasIndex("Usuarioid_user");

                    b.ToTable("Like_post");
                });

            modelBuilder.Entity("Brot.Models.Publicacion", b =>
                {
                    b.Property<int>("id_post")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_post"), 1L, 1);

                    b.Property<int>("CantVisitasPublicacion")
                        .HasColumnType("int");

                    b.Property<int?>("Usuarioid_user")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("fecha_actualizacion")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("fecha_creacion")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("isImg")
                        .HasColumnType("bit");

                    b.HasKey("id_post");

                    b.HasIndex("Usuarioid_user");

                    b.ToTable("Publicaciones");
                });

            modelBuilder.Entity("Brot.Models.Publicacion_guardada", b =>
                {
                    b.Property<int>("id_publicacion_guardada")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_publicacion_guardada"), 1L, 1);

                    b.Property<int?>("Publicacionid_post")
                        .HasColumnType("int");

                    b.Property<int?>("Usuarioid_user")
                        .HasColumnType("int");

                    b.Property<DateTime?>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_post")
                        .HasColumnType("int");

                    b.Property<int>("id_user")
                        .HasColumnType("int");

                    b.HasKey("id_publicacion_guardada");

                    b.HasIndex("Publicacionid_post");

                    b.HasIndex("Usuarioid_user");

                    b.ToTable("Publicacion_guardada");
                });

            modelBuilder.Entity("Brot.Models.Seguido", b =>
                {
                    b.Property<int>("Id_seguidor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id_seguidor"), 1L, 1);

                    b.Property<int>("Id_PersonaQueSigue")
                        .HasColumnType("int");

                    b.Property<int>("Id_PersonaSeguida")
                        .HasColumnType("int");

                    b.Property<bool?>("accepted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("fecha")
                        .HasColumnType("datetime2");

                    b.HasKey("Id_seguidor");

                    b.ToTable("Seguidores");
                });

            modelBuilder.Entity("Brot.Models.Usuario", b =>
                {
                    b.Property<int>("id_user")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_user"), 1L, 1);

                    b.Property<string>("Device_id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone_OS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("apellido")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("categoriaid_categoria")
                        .HasColumnType("int");

                    b.Property<string>("descripcion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dui")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("id_categoria")
                        .HasColumnType("int");

                    b.Property<string>("img")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("isDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("isVendor")
                        .HasColumnType("bit");

                    b.Property<string>("nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("num_telefono")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("puesto_name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("puntaje")
                        .HasColumnType("int");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<float?>("xlat")
                        .HasColumnType("real");

                    b.Property<float?>("ylon")
                        .HasColumnType("real");

                    b.HasKey("id_user");

                    b.HasIndex("categoriaid_categoria");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Brot.Models.Visita_perfil", b =>
                {
                    b.Property<int>("id_visita_perfil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id_visita_perfil"), 1L, 1);

                    b.Property<DateTime?>("fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("id_userQueEntro")
                        .HasColumnType("int");

                    b.Property<int>("id_userVisitado")
                        .HasColumnType("int");

                    b.HasKey("id_visita_perfil");

                    b.ToTable("Visita_busqueda");
                });

            modelBuilder.Entity("Brot.Models.Comentario", b =>
                {
                    b.HasOne("Brot.Models.Publicacion", "Publicacion")
                        .WithMany("Comentarios")
                        .HasForeignKey("Publicacionid_post");

                    b.HasOne("Brot.Models.Usuario", "Usuario")
                        .WithMany("comentarios")
                        .HasForeignKey("Usuarioid_user");

                    b.Navigation("Publicacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Brot.Models.Interaccion_post", b =>
                {
                    b.HasOne("Brot.Models.Publicacion", "Publicacion")
                        .WithMany("interaccion_post")
                        .HasForeignKey("Publicacionid_post");

                    b.HasOne("Brot.Models.Usuario", "UsuarioInteraccion")
                        .WithMany("interaccion_post")
                        .HasForeignKey("UsuarioInteraccionid_user");

                    b.Navigation("Publicacion");

                    b.Navigation("UsuarioInteraccion");
                });

            modelBuilder.Entity("Brot.Models.Like_comentario", b =>
                {
                    b.HasOne("Brot.Models.Comentario", "Comentario")
                        .WithMany("like_comentario")
                        .HasForeignKey("Comentarioid_comentario");

                    b.HasOne("Brot.Models.Usuario", "Usuario")
                        .WithMany("like_comentario")
                        .HasForeignKey("Usuarioid_user");

                    b.Navigation("Comentario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Brot.Models.Like_post", b =>
                {
                    b.HasOne("Brot.Models.Publicacion", "Publicacion")
                        .WithMany("Likes_post")
                        .HasForeignKey("Publicacionid_post");

                    b.HasOne("Brot.Models.Usuario", "Usuario")
                        .WithMany("like_post")
                        .HasForeignKey("Usuarioid_user");

                    b.Navigation("Publicacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Brot.Models.Publicacion", b =>
                {
                    b.HasOne("Brot.Models.Usuario", "Usuario")
                        .WithMany("publicaciones")
                        .HasForeignKey("Usuarioid_user");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Brot.Models.Publicacion_guardada", b =>
                {
                    b.HasOne("Brot.Models.Publicacion", "Publicacion")
                        .WithMany("Publicacion_Guardadas")
                        .HasForeignKey("Publicacionid_post");

                    b.HasOne("Brot.Models.Usuario", "Usuario")
                        .WithMany("publicacion_guardada")
                        .HasForeignKey("Usuarioid_user");

                    b.Navigation("Publicacion");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("Brot.Models.Usuario", b =>
                {
                    b.HasOne("Brot.Models.Categoria", "categoria")
                        .WithMany("Usuarios")
                        .HasForeignKey("categoriaid_categoria");

                    b.Navigation("categoria");
                });

            modelBuilder.Entity("Brot.Models.Categoria", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Brot.Models.Comentario", b =>
                {
                    b.Navigation("like_comentario");
                });

            modelBuilder.Entity("Brot.Models.Publicacion", b =>
                {
                    b.Navigation("Comentarios");

                    b.Navigation("Likes_post");

                    b.Navigation("Publicacion_Guardadas");

                    b.Navigation("interaccion_post");
                });

            modelBuilder.Entity("Brot.Models.Usuario", b =>
                {
                    b.Navigation("comentarios");

                    b.Navigation("interaccion_post");

                    b.Navigation("like_comentario");

                    b.Navigation("like_post");

                    b.Navigation("publicacion_guardada");

                    b.Navigation("publicaciones");
                });
#pragma warning restore 612, 618
        }
    }
}
